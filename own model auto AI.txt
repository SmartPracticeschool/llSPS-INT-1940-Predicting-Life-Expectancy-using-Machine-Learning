import java.io.*;
import java.net.MalformedURLException;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
public class HttpClientTest {
	public static void main(String[] args) throws IOException {

		// NOTE: generate <iam_token> based on provided documentation
		String wml_token = "Bearer <iam_token>";

		// NOTE: retrieve <ml_instance_id> based on provided documentation
		String ml_instance_id = "<ml_instance_id>";

		HttpURLConnection scoringConnection = null;
		BufferedReader scoringBuffer = null;
		try {
			// Scoring request
			URL scoringUrl = new URL("https://eu-gb.ml.cloud.ibm.com/v4/deployments/f5f87a2d-bcab-4cbc-99c8-a8ce439b9f6b/predictions");
			scoringConnection = (HttpURLConnection) scoringUrl.openConnection();
			scoringConnection.setDoInput(true);
			scoringConnection.setDoOutput(true);
			scoringConnection.setRequestMethod("POST");
			scoringConnection.setRequestProperty("Accept", "application/json");
			scoringConnection.setRequestProperty("Authorization", wml_token);
			scoringConnection.setRequestProperty("ML-Instance-ID", ml_instance_id);
			scoringConnection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
			OutputStreamWriter writer = new OutputStreamWriter(scoringConnection.getOutputStream(), "UTF-8");

			// NOTE: manually define and pass the array(s) of values to be scored in the next line
			String payload = "{\"input_data\": [{\"fields\": [\"Year\", \"New York City Population\", \"NYC Consumption(Million gallons per day)\"], \"values\": [array_of_values_to_be_scored, another_array_of_values_to_be_scored]}]}";
			writer.write(payload);
			writer.close();

			scoringBuffer = new BufferedReader(new InputStreamReader(scoringConnection.getInputStream()));
			StringBuffer jsonStringScoring = new StringBuffer();
			String lineScoring;
			while ((lineScoring = scoringBuffer.readLine()) != null) {
				jsonStringScoring.append(lineScoring);
			}
			System.out.println(jsonStringScoring);
		} catch (IOException e) {
			System.out.println("The URL is not valid.");
			System.out.println(e.getMessage());
		}
		finally {
			if (scoringConnection != null) {
				scoringConnection.disconnect();
			}
			if (scoringBuffer != null) {
				scoringBuffer.close();
			}
		}
	}
}